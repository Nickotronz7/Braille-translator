/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package brailleread;

import java.awt.Color;
import java.io.File;
import javax.swing.JFileChooser;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.stage.FileChooser;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.pdfbox.cos.COSDocument;
import org.apache.pdfbox.io.RandomAccessRead;
import org.apache.pdfbox.pdfparser.PDFParser;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.pdfbox.text.PDFTextStripperByArea;
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.XWPFDocument;

/**
 *
 * @author Pablo
 */
public class Menu extends javax.swing.JFrame {
    JFileChooser jfc = new JFileChooser();
    private File file;
    private String direccion, documento, tipo, nombre;
    private ImageIcon img;
    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
        this.setVisible(true);
        this.setResizable(false);
        this.setLocation(700, 200);
        this.setSize(602, 330);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("txt, docx y PDFS", "txt", "docx", "pdf");
        jfc.setFileFilter(filter);
        img = new ImageIcon("C:\\Users\\Usuario\\Documents\\NetBeansProjects\\BrailleRead\\Imagenes\\BrailleRead\\braille_B_or_2.png");
        this.setIconImage(img.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnCargarDocumento = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Men√∫");
        setBackground(new java.awt.Color(0, 0, 0));
        setBounds(new java.awt.Rectangle(700, 300, 600, 300));
        setForeground(java.awt.Color.black);
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 600, 300));
        setMaximumSize(new java.awt.Dimension(600, 300));
        setMinimumSize(new java.awt.Dimension(600, 300));
        setName("jframeMenu"); // NOI18N
        setPreferredSize(new java.awt.Dimension(600, 300));
        setResizable(false);
        setSize(new java.awt.Dimension(600, 300));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jbtnCargarDocumento.setText("Cargar Documento");
        jbtnCargarDocumento.setMaximumSize(new java.awt.Dimension(125, 25));
        jbtnCargarDocumento.setMinimumSize(new java.awt.Dimension(125, 25));
        jbtnCargarDocumento.setPreferredSize(new java.awt.Dimension(125, 25));
        jbtnCargarDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCargarDocumentoActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnCargarDocumento, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 140, 160, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/braille.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnCargarDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCargarDocumentoActionPerformed
        // TODO add your handling code here:
        //new SeleccionadorDeDocumentos();
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            direccion = jfc.getSelectedFile().getAbsolutePath();
            file = new File(direccion);
            nombre = file.getName();
            try {
                tipo = nombre.substring(nombre.lastIndexOf(".") + 1);
            } catch (Exception e) {
                e.printStackTrace();
            }     
        
            switch(tipo){
                case "txt":
                    try {
                        BufferedReader br = new BufferedReader(new FileReader(direccion));
                        StringBuilder sb = new StringBuilder();
                        String line = br.readLine();
                        while (line != null) {
                            sb.append(line);
                            sb.append(System.lineSeparator());
                            line = br.readLine();
                        }
                        documento = sb.toString();
                        //System.out.println(documento);
                    
                        } catch (FileNotFoundException ex) {
                            ex.printStackTrace();
                        } catch (IOException ex) {  
                            ex.printStackTrace();
                        }
                    break;
                case "docx":
                    try{
                        XWPFDocument docx = new XWPFDocument(new FileInputStream(direccion));
                        XWPFWordExtractor we = new XWPFWordExtractor(docx);
                        documento = we.getText().toString();
                        //System.out.println(documento);
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                    break;
                case "pdf":                
                    try{
                        PDDocument PDFDocument = PDDocument.load(file);
                        PDFDocument.getClass();
                        if (!PDFDocument.isEncrypted()) {
                            PDFTextStripperByArea stripper = new PDFTextStripperByArea();
                            stripper.setSortByPosition(true);
                            PDFTextStripper tStripper = new PDFTextStripper();
                            String pdfFileInText = tStripper.getText(PDFDocument);
                            
                            StringBuilder sb = new StringBuilder();
                        
                            String lines[] = pdfFileInText.split("\\r?\\n");
                            for (String line : lines) {
                                sb.append(line);
                                sb.append(System.lineSeparator());
                            }
                            documento = sb.toString();
                            //System.out.println(documento);                        
                        }
                    
                    
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                    break;
            }
            //System.out.println("Se envia al traductor");
            //System.out.println(documento);
            BRWindow b;
            b = new BRWindow();
            b.setVisible(true);                
            b.trad.TranslateToBraille(documento);
            b.tok.createTokenTable(documento);
            
        }else{
            
        }
        
        
    }//GEN-LAST:event_jbtnCargarDocumentoActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jbtnCargarDocumento;
    // End of variables declaration//GEN-END:variables
}
